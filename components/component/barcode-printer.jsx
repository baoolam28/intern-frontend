/**
* This code was generated by v0 by Vercel.
* @see https://v0.dev/t/0ugNhGaiJXx
* Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
*/

/** Add fonts into your Next.js project:

import { Inter } from 'next/font/google'

inter({
  subsets: ['latin'],
  display: 'swap',
})

To read more about using these font, please visit the Next.js documentation:
- App Directory: https://nextjs.org/docs/app/building-your-application/optimizing/fonts
- Pages Directory: https://nextjs.org/docs/pages/building-your-application/optimizing/fonts
**/
"use client"
import React, { useState, useMemo, useEffect } from 'react';
import { Input } from '@/components/ui/input';
import { DropdownMenu, DropdownMenuTrigger, DropdownMenuContent, DropdownMenuLabel, DropdownMenuSeparator, DropdownMenuCheckboxItem } from '@/components/ui/dropdown-menu';
import { Button } from '@/components/ui/button';
import { Checkbox } from '@/components/ui/checkbox';
import productAPI from '../../api/product';
import BarcodeRender from './BarcodeRender';
import BarcodePagePrinter from './BarcodePagePrinter';
import PrintButton from './PrintButtonBarcode';
export default function BarcodePrinter() {
  const [searchTerm, setSearchTerm] = useState('');
  const [selectedFilters, setSelectedFilters] = useState([]);
  const [selectedBarcode, setSelectedBarcode] = useState([]);
  const [products, setProducts] = useState([]);
  const [preview, setPreview] = useState(false);

  useEffect(() => {
    const fetchProducts = async () => {
      try {
        const response = await productAPI.getAllProduct();
        setProducts(response);
        console.log('Products fetched:', response);
      } catch (error) {
        console.error('Error fetching products:', error);
      }
    };

    fetchProducts();
  }, []);

  const filteredBarcode = useMemo(() => {
    return products.filter(product => {
      const matchesSearchTerm = product.productName.toLowerCase().includes(searchTerm.toLowerCase()) ||
                                product.barcode.includes(searchTerm);
      const matchesFilters = selectedFilters.length === 0 || selectedFilters.includes(product.category);

      return matchesSearchTerm && matchesFilters;
    });
  }, [searchTerm, selectedFilters, products]);

  const handleSearch = (e) => {
    setSearchTerm(e.target.value);
  };

  const handleFilterChange = (filter) => {
    if (selectedFilters.includes(filter)) {
      setSelectedFilters(selectedFilters.filter((f) => f !== filter));
    } else {
      setSelectedFilters([...selectedFilters, filter]);
    }
  };

  const handleBarcodeSelect = (product) => {
    const barcodeExists = selectedBarcode.find((item) => item.barcode === product.barcode);
    if (barcodeExists) {
      setSelectedBarcode(selectedBarcode.filter((item) => item.barcode !== product.barcode));
    } else {
      setSelectedBarcode([...selectedBarcode, 
        { barcode: product.barcode, 
          productName: product.productName, 
          quantity: 1 }]);
    }
  };

  const handleChangeQuantity = (e, barcode) => {
    const quantity = parseInt(e.target.value, 10);
    setSelectedBarcode(selectedBarcode.map((item) =>
      item.barcode === barcode ? { ...item, quantity } : item
    ));
  };

  const handlePrint = () => {
    console.log('Printing selected products:', selectedBarcode);
  };

  return (
    <div className="flex flex-col h-full">
      <header className="bg-background p-4 border-b">
        <div className="flex items-center">
          <Input
            type="search"
            placeholder="Search products..."
            value={searchTerm}
            onChange={handleSearch}
            className="flex-1 mr-4"
          />
          <DropdownMenu>
            <DropdownMenuTrigger asChild>
              <Button variant="outline" className="flex items-center gap-2">
                <FilterIcon className="h-4 w-4" />
                Filters
              </Button>
            </DropdownMenuTrigger>
            <DropdownMenuContent align="end" className="w-56">
              <DropdownMenuLabel>Filter by</DropdownMenuLabel>
              <DropdownMenuSeparator />
              <DropdownMenuCheckboxItem
                checked={selectedFilters.includes('Electronics')}
                onCheckedChange={() => handleFilterChange('Electronics')}
              >
                Electronics
              </DropdownMenuCheckboxItem>
              <DropdownMenuCheckboxItem
                checked={selectedFilters.includes('Toys')}
                onCheckedChange={() => handleFilterChange('Toys')}
              >
                Toys
              </DropdownMenuCheckboxItem>
              <DropdownMenuCheckboxItem
                checked={selectedFilters.includes('Tools')}
                onCheckedChange={() => handleFilterChange('Tools')}
              >
                Tools
              </DropdownMenuCheckboxItem>
              <DropdownMenuCheckboxItem
                checked={selectedFilters.includes('Accessories')}
                onCheckedChange={() => handleFilterChange('Accessories')}
              >
                Accessories
              </DropdownMenuCheckboxItem>
              <DropdownMenuCheckboxItem
                checked={selectedFilters.includes('Barcode')}
                onCheckedChange={() => handleFilterChange('Barcode')}
              >
                Barcode
              </DropdownMenuCheckboxItem>
              <DropdownMenuCheckboxItem
                checked={selectedFilters.includes('QR Code')}
                onCheckedChange={() => handleFilterChange('QR Code')}
              >
                QR Code
              </DropdownMenuCheckboxItem>
            </DropdownMenuContent>
          </DropdownMenu>
        </div>
      </header>
      <main className="flex-1 overflow-y-auto p-4">
        <ul className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4">
          {filteredBarcode.map((product) => (
            <li key={product.barcode} className="bg-background border rounded-lg overflow-hidden">
              <div className="p-4">
                <div className="flex items-center justify-between mb-4">
                  <h3 className="font-medium">{product.productName}</h3>
                  <Checkbox
                    checked={!!selectedBarcode.find((item) => item.barcode === product.barcode)}
                    onCheckedChange={() => handleBarcodeSelect(product)}
                  />
                </div>
                <div className="flex justify-center mb-4">
                  <BarcodeRender value={product.barcode} width={2} height={100}/>
                </div>
                <div className="flex justify-between text-sm text-muted-foreground">
                  <span>{product.categoryName}</span>
                  <span>{product.supplierName}</span>
                </div>
                <div className="mt-2">
                  <label className="block text-sm">Số lượng:</label>
                  <Input
                    type="number"
                    min="1"
                    value={
                      selectedBarcode.find((item) => item.barcode === product.barcode)?.quantity
                    }
                    onChange={(e) => handleChangeQuantity(e, product.barcode)}
                    className="mt-1"
                  />
                </div>
              </div>
            </li>
          ))}
        </ul>
      </main>
      <footer className="bg-background p-4 border-t">
        <div className="flex justify-end">
          <Button onClick={() => setPreview(!preview)}>
            Xem trước
          </Button>
          <PrintButton contentPrinter={selectedBarcode} />
        </div>
      </footer>
      <div>
        {preview && (
          <BarcodePagePrinter
            contentPrinter={selectedBarcode}
          />
        )}
      </div>
    </div>
  );
}

function FilterIcon(props) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <polygon points="22 3 2 3 10 12.46 10 19 14 21 14 12.46 22 3" />
    </svg>
  );
}
