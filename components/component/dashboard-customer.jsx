/**
* This code was generated by v0 by Vercel.
* @see https://v0.dev/t/VjbckIqHoCf
* Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
*/

/** Add fonts into your Next.js project:

import { Inter } from 'next/font/google'

inter({
  subsets: ['latin'],
  display: 'swap',
})

To read more about using these font, please visit the Next.js documentation:
- App Directory: https://nextjs.org/docs/app/building-your-application/optimizing/fonts
- Pages Directory: https://nextjs.org/docs/pages/building-your-application/optimizing/fonts
**/
"use client"

import { useState , useEffect} from "react"
import { Button } from "@/components/ui/button"
import { Card, CardHeader, CardTitle, CardContent } from "@/components/ui/card"
import { Separator } from "@/components/ui/separator"
import { Table, TableHeader, TableRow, TableHead, TableBody, TableCell } from "@/components/ui/table"
import { Dialog, DialogContent, DialogFooter } from "@/components/ui/dialog";
import { Label } from "@/components/ui/label"
import { Input } from "@/components/ui/input"
import { ChartTooltipContent, ChartTooltip, ChartContainer } from "@/components/ui/chart"
import { Pie, PieChart, CartesianGrid, XAxis, Line, LineChart } from "recharts"
import { DialogTrigger, DialogHeader, DialogTitle, DialogDescription, DialogClose } from "@/components/ui/dialog"
import Menu from "../component/menu"
import customerAPI from "../../api/customer"
import ReportAPI from "../../api/report"
export default   function dashboardCustomer() {
  const [customers, setCustomers] = useState([])
  const [showModal, setShowModal] = useState(false)
  const [selectedCustomer, setSelectedCustomer] = useState(null)
  const [orderReports, setOrderReports] = useState({
    totalOrders: 0,
    totalRevenue: 0,
    averageOderValue: 0,
  });

  const fetchCustomers = async () => {
    try {
      const response = await customerAPI.getAllCustomers()
      setCustomers(response)
    } catch (error) {
      console.error('Error fetching customers:', error)
    }
  }

  const fetchOrderReports = async () => {
    try {
      const response = await ReportAPI.getOrderReports();
      console.log(response)
      setOrderReports({
        totalOrders: response.totalOrders,
        totalRevenue: response.totalRevenue,
        averageOrderValue: response.averageOrderValue,
      });
    } catch (error) {
      console.error('Error fetching customers:', error)
    }
  }

  useEffect(() => {
    fetchCustomers()
    fetchOrderReports()
  }, [])

  const handleCreateCustomer = () => {
    setSelectedCustomer(null)
    setShowModal(true)
  }

  const handleEditCustomer = (customer) => {
    setSelectedCustomer(customer)
    setShowModal(true)
  }

  const handleDeleteCustomer = async (id) => {
    try {
      await customerAPI.deleteCustomer(id)
      setCustomers(customers.filter((customer) => customer.customerId !== id))
    } catch (error) {
      console.error('Error deleting customer:', error)
    }
  }

  const handleSaveCustomer = async () => {
    const name = document.getElementById("name").value
    const email = document.getElementById("email").value
    const phone = document.getElementById("phone").value
    const address = document.getElementById("address").value

    const customer = {
      customerId: selectedCustomer ? selectedCustomer.customerId : undefined,
      name,
      email,
      phone,
      address
    }

    try {
      if (selectedCustomer) {
        const updatedCustomer = await customerAPI.updateCustomer(customer.customerId, customer)
        console.log(updatedCustomer)
        setCustomers(customers.map((c) => (c.customerId === updatedCustomer.data.customerId ? updatedCustomer.data : c)))
      } else {
        const newCustomer = await customerAPI.createCustomer(customer)
        setCustomers([...customers, newCustomer])
      }
      setShowModal(false)
    } catch (error) {
      console.error('Error saving customer:', error)
    }
  }

  

  return (
    
    (<div className="flex min-h-screen w-full flex-col bg-muted/40 ">
      <Menu/>
      
      <main className="flex flex-col sm:gap-4 sm:py-4 sm:pl-14 ml-5">
        <header className="bg-primary text-primary-foreground py-4 px-8">
        <div className="flex items-center justify-between">
          <h1 className="text-2xl font-bold">Customer Admin</h1>
            <Button onClick={handleCreateCustomer}>
                  <PlusIcon className="mr-2 h-4 w-4" />
                  Create Customer
            </Button>
        </div>
      </header>
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
          <Card>
            <CardHeader>
              <CardTitle>Total Orders</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="text-4xl font-bold">{orderReports.totalOrders}</div>
            </CardContent>
          </Card>
          <Card>
            <CardHeader>
              <CardTitle>Total Revenue</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="text-4xl font-bold">{orderReports.totalRevenue}</div>
            </CardContent>
          </Card>
          <Card>
            <CardHeader>
              <CardTitle>Average Order Value</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="text-4xl font-bold">{(orderReports.averageOrderValue ?? 0).toFixed(2)}</div>
            </CardContent>
          </Card>
        </div>
        <Separator className="my-6" />
        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
          <Card>
            <CardHeader>
              <CardTitle>Customer Segmentation</CardTitle>
            </CardHeader>
            <CardContent>
              <PiechartcustomChart className="aspect-square" />
            </CardContent>
          </Card>
          <Card>
            <CardHeader>
              <CardTitle>Orders Over Time</CardTitle>
            </CardHeader>
            <CardContent>
              <LinechartChart className="aspect-[9/4]" />
            </CardContent>
          </Card>
        </div>
        <Separator className="my-6" />
        <div>
          <div className="flex items-center justify-between mb-4">
            <h2 className="text-xl font-bold">Customers</h2>
              <Button onClick={handleCreateCustomer}>
                  <PlusIcon className="mr-2 h-4 w-4" />
                  Create Customer
              </Button>
          </div>
          <Table>
            <TableHeader>
              <TableRow>
                <TableHead>Name</TableHead>
                <TableHead>Email</TableHead>
                <TableHead>Phone</TableHead>
                <TableHead>Adress</TableHead>
                <TableHead>Actions</TableHead>
              </TableRow>
            </TableHeader>
            <TableBody>
              {customers.map((customer) => (
                <TableRow key={customer.customerId}>
                  <TableCell>{customer.name}</TableCell>
                  <TableCell>{customer.email}</TableCell>
                  <TableCell>{customer.phone}</TableCell>
                  <TableCell>{customer.address}</TableCell>
                  <TableCell>
                    <Button onClick={() => handleEditCustomer(customer)}><FilePenIcon className="mr-2 h-4 w-4" /></Button>
                    <Button onClick={() => handleDeleteCustomer(customer.customerId)}><TrashIcon className="mr-2 h-4 w-4" /></Button>
                  </TableCell>
                </TableRow>
              ))}
            </TableBody>

          </Table>
        </div>
      </main>
       {showModal && (
        <Dialog open={showModal} onOpenChange={setShowModal}>
          <DialogContent className="sm:max-w-[500px]">
            <DialogHeader>
              <DialogTitle>{selectedCustomer ? "Edit Customer" : "Add New Customer"}</DialogTitle>
              <DialogDescription>Fill out the form below to save the customer details.</DialogDescription>
            </DialogHeader>
            <form className="grid gap-4 py-4" onSubmit={handleSaveCustomer}>
              <div className="grid grid-cols-2 gap-4">
                <div className="space-y-2">
                  <Label htmlFor="name">Name</Label>
                  <Input id="name" name="name" placeholder="John Doe" defaultValue={selectedCustomer?.name || ""} />
                </div>
                <div className="space-y-2">
                  <Label htmlFor="email">Email</Label>
                  <Input id="email" name="email" type="email" placeholder="john@example.com" defaultValue={selectedCustomer?.email || ""} />
                </div>
              </div>
              <div className="grid grid-cols-2 gap-4">
                <div className="space-y-2">
                  <Label htmlFor="phone">Phone</Label>
                  <Input id="phone" name="phone" type="tel" placeholder="+1 (555) 555-5555" defaultValue={selectedCustomer?.phone || ""} />
                </div>
                <div className="space-y-2">
                  <Label htmlFor="address">Address</Label>
                  <Input id="address" name="address" placeholder="123 Main St, Anytown USA" defaultValue={selectedCustomer?.address || ""} />
                </div>
              </div>
              <DialogFooter>
                <Button type="submit">Save</Button>
                <DialogClose asChild>
                  <Button variant="secondary">Cancel</Button>
                </DialogClose>
              </DialogFooter>
            </form>
          </DialogContent>
        </Dialog>
      )}
    </div>)
  );
}

function FilePenIcon(props) {
  return (
    (<svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round">
      <path d="M12 22h6a2 2 0 0 0 2-2V7l-5-5H6a2 2 0 0 0-2 2v10" />
      <path d="M14 2v4a2 2 0 0 0 2 2h4" />
      <path d="M10.4 12.6a2 2 0 1 1 3 3L8 21l-4 1 1-4Z" />
    </svg>)
  );
}


function LinechartChart(props) {
  return (
    (<div {...props}>
      <ChartContainer
        config={{
          desktop: {
            label: "Desktop",
            color: "hsl(var(--chart-1))",
          },
        }}>
        <LineChart
          accessibilityLayer
          data={[
            { month: "January", desktop: 186 },
            { month: "February", desktop: 305 },
            { month: "March", desktop: 237 },
            { month: "April", desktop: 73 },
            { month: "May", desktop: 209 },
            { month: "June", desktop: 214 },
          ]}
          margin={{
            left: 12,
            right: 12,
          }}>
          <CartesianGrid vertical={false} />
          <XAxis
            dataKey="month"
            tickLine={false}
            axisLine={false}
            tickMargin={8}
            tickFormatter={(value) => value.slice(0, 3)} />
          <ChartTooltip cursor={false} content={<ChartTooltipContent hideLabel />} />
          <Line
            dataKey="desktop"
            type="natural"
            stroke="var(--color-desktop)"
            strokeWidth={2}
            dot={false} />
        </LineChart>
      </ChartContainer>
    </div>)
  );
}


function PiechartcustomChart(props) {
  return (
    (<div {...props}>
      <ChartContainer
        config={{
          visitors: {
            label: "Visitors",
          },
          chrome: {
            label: "Chrome",
            color: "hsl(var(--chart-1))",
          },
          safari: {
            label: "Safari",
            color: "hsl(var(--chart-2))",
          },
          firefox: {
            label: "Firefox",
            color: "hsl(var(--chart-3))",
          },
          edge: {
            label: "Edge",
            color: "hsl(var(--chart-4))",
          },
          other: {
            label: "Other",
            color: "hsl(var(--chart-5))",
          },
        }}>
        <PieChart>
          <ChartTooltip cursor={false} content={<ChartTooltipContent hideLabel />} />
          <Pie
            data={[
              { browser: "chrome", visitors: 275, fill: "var(--color-chrome)" },
              { browser: "safari", visitors: 200, fill: "var(--color-safari)" },
              { browser: "firefox", visitors: 187, fill: "var(--color-firefox)" },
              { browser: "edge", visitors: 173, fill: "var(--color-edge)" },
              { browser: "other", visitors: 90, fill: "var(--color-other)" },
            ]}
            dataKey="visitors"
            nameKey="browser" />
        </PieChart>
      </ChartContainer>
      <div>
      
      </div>
    </div>)
  );
}


function PlusIcon(props) {
  return (
    (<svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round">
      <path d="M5 12h14" />
      <path d="M12 5v14" />
    </svg>)
  );
}


function TrashIcon(props) {
  return (
    (<svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round">
      <path d="M3 6h18" />
      <path d="M19 6v14c0 1-1 2-2 2H7c-1 0-2-1-2-2V6" />
      <path d="M8 6V4c0-1 1-2 2-2h4c1 0 2 1 2 2v2" />
    </svg>)
  );
}


function XIcon(props) {
  return (
    (<svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round">
      <path d="M18 6 6 18" />
      <path d="m6 6 12 12" />
    </svg>)
  );
}
