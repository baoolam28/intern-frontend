/**
* This code was generated by v0 by Vercel.
* @see https://v0.dev/t/VoXVgG9J7m4
* Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
*/

/** Add fonts into your Next.js project:

import { Libre_Franklin } from 'next/font/google'
import { Chivo } from 'next/font/google'

libre_franklin({
  subsets: ['latin'],
  display: 'swap',
})

chivo({
  subsets: ['latin'],
  display: 'swap',
})

To read more about using these font, please visit the Next.js documentation:
- App Directory: https://nextjs.org/docs/app/building-your-application/optimizing/fonts
- Pages Directory: https://nextjs.org/docs/pages/building-your-application/optimizing/fonts
**/
"use client"
import React, {useState, useEffect} from "react"
import Link from "next/link"
import { Card, CardHeader, CardTitle, CardContent } from "@/components/ui/card"
import { Label } from "@/components/ui/label"
import { Input } from "@/components/ui/input"
import { Button } from "@/components/ui/button"
import { Textarea } from "@/components/ui/textarea"
import { Table, TableHeader, TableRow, TableHead, TableBody, TableCell } from "@/components/ui/table"
import Menu from "../component/menu"
import { useSearchParams } from 'next/navigation'
import orderAPI from '../../api/order'
import formatVND from "../../utils/formatVND"
export default function paymentView() {

  const [order, setOrder] = useState({});
  const [paymentMethod, setPaymentMethod] = useState('');
  const [paymentAmount, setPaymentAmount] = useState(0);

  const searchParams = useSearchParams();
  const orderId = searchParams.get('orderId');

  useEffect(() => {
    const fetchOrder = async () =>{
      try {
        const response = await orderAPI.getOrder(orderId);
        console.log(response);
        if(response){
          setOrder(response);
          caculatePayAmount(response);
        }
        
      } catch (error) {
        console.error("fetch order failed", error);
      }
    }
    fetchOrder();
  },[orderId]);

  const caculatePayAmount = (order) => {
    let payAmount = 0;
    order.orderDetails.map((detail) => {
      payAmount += detail.price * detail.quantity;
    });
    setPaymentAmount(payAmount);
  }

  if (!order) {
    return <div>Loading...</div>;
  }

  return (
    (<div className="flex min-h-screen flex-col bg-muted/40">
      <Menu/>
      <main className="flex-1 p-4 sm:p-6 md:grid md:grid-cols-2 md:gap-8 ml-10">
        <div className="space-y-6">
          <Card>
            <CardHeader>
              <CardTitle>Phương thức thanh toán</CardTitle>
            </CardHeader>
            <CardContent className="grid gap-4">
              <div className="grid gap-2">
                <Label htmlFor="cash-amount">Tiền mặt</Label>
                <div className="flex items-center gap-2">
                  <Label htmlFor="cash-amount">Khách đưa</Label>
                  <Input id="cash-amount" type="number" placeholder="Amount" className="flex-1" />
                  <Label htmlFor="cash-amount">Thối lại</Label>
                  <Input type="number" placeholder="Change" className="flex-1" readOnly/>
                </div>
              </div>
              <Button variant="outline">
                <BanknoteIcon className="h-5 w-5 mr-2" />
                Pay with VNPay
              </Button>
              <Button variant="outline">
                <QrCodeIcon className="h-5 w-5 mr-2" />
                Pay with QR Code
              </Button>
            </CardContent>
          </Card>
        </div>
        <div className="space-y-6">
          <Card>
            <CardHeader>
              <CardTitle>Hóa Đơn | {order.orderId}</CardTitle>
            </CardHeader>
            <CardContent className="grid gap-4">
              <div className="grid gap-2">
                <Label htmlFor="customer-name">Tên khách hàng</Label>
                <Input id="customer-name" value={order.customer ? order.customer.name : ''} readOnly  />
              </div>
              <div className="grid gap-2">
                <Label htmlFor="customer-phone">Số điện thoại</Label>
                <Input id="customer-phone" value={order.customer ? order.customer.phone : ''}  readOnly />
              </div>
              <div className="grid gap-2">
                <Label htmlFor="customer-email">Email</Label>
                <Input id="customer-email" value={order.customer ? order.customer.email : ''} type="email"  readOnly  />
              </div>
              <div className="grid gap-2">
                <Label htmlFor="customer-address">Địa chỉ</Label>
                <Textarea id="customer-address" value={order.customer ? order.customer.address : ''} rows={3} readOnly />
              </div>
              <div className="grid gap-2">

                <Table>
                  <TableHeader>
                    <TableRow>
                      <TableHead>Tên SP</TableHead>
                      <TableHead>số lượng</TableHead>
                      <TableHead>giá</TableHead>
                      <TableHead>Tổng</TableHead>
                    </TableRow>
                  </TableHeader>
                  <TableBody>
                    {
                      order.orderDetails ? order.orderDetails.map((order) => {
                        return (
                          <TableRow>
                            <TableCell>{order.productName}</TableCell>
                            <TableCell>{order.quantity}</TableCell>
                            <TableCell>{formatVND(order.price)}</TableCell>
                            <TableCell>{formatVND(order.quantity * order.price)}</TableCell>
                          </TableRow>
                        )
                      }) : null
                    }
                  </TableBody>
                </Table>
                <div className="flex items-center justify-between">
                  <span className="font-medium">Tổng: {formatVND(paymentAmount)}</span>
                </div>
              </div>
            </CardContent>
          </Card>
        </div>
      </main>
    </div>)
  );
}

function BanknoteIcon(props) {
  return (
    (<svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round">
      <rect width="20" height="12" x="2" y="6" rx="2" />
      <circle cx="12" cy="12" r="2" />
      <path d="M6 12h.01M18 12h.01" />
    </svg>)
  );
}


function MountainIcon(props) {
  return (
    (<svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round">
      <path d="m8 3 4 8 5-5 5 15H2L8 3z" />
    </svg>)
  );
}


function QrCodeIcon(props) {
  return (
    (<svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round">
      <rect width="5" height="5" x="3" y="3" rx="1" />
      <rect width="5" height="5" x="16" y="3" rx="1" />
      <rect width="5" height="5" x="3" y="16" rx="1" />
      <path d="M21 16h-3a2 2 0 0 0-2 2v3" />
      <path d="M21 21v.01" />
      <path d="M12 7v3a2 2 0 0 1-2 2H7" />
      <path d="M3 12h.01" />
      <path d="M12 3h.01" />
      <path d="M12 16v.01" />
      <path d="M16 12h1" />
      <path d="M21 12v.01" />
      <path d="M12 21v-1" />
    </svg>)
  );
}
